name: "Build Windows Release"

on:
  workflow_dispatch:
  push:
    tags:
      - "misrc_capture-*"

env:
  ARCHIVE_NAME_WINDOWS: ${{ github.ref_name }}-win-x86_64.zip

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            git
            zip
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-flac
            mingw-w64-x86_64-pkgconf
            make

      - name: Setup hsdaoh environment from pre-built binaries
        run: |
          # Create hsdaoh directory structure for CMake
          mkdir -p hsdaoh_deps/lib
          mkdir -p hsdaoh_deps/include
          
          # Copy pre-built hsdaoh library
          cp windows-binaries/libhsdaoh.dll hsdaoh_deps/lib/
          
          # For MinGW, we need to create an import library from the DLL
          # First, create a .def file with the exports
          cat > hsdaoh_deps/lib/hsdaoh.def << 'EOF'
          EXPORTS
          hsdaoh_get_device_count
          hsdaoh_get_device_name
          hsdaoh_get_device_usb_strings
          hsdaoh_get_index_by_serial
          hsdaoh_open
          hsdaoh_close
          hsdaoh_set_center_freq
          hsdaoh_get_center_freq
          hsdaoh_set_freq_correction
          hsdaoh_get_freq_correction
          hsdaoh_get_tuner_type
          hsdaoh_get_tuner_gains
          hsdaoh_set_tuner_gain
          hsdaoh_get_tuner_gain
          hsdaoh_set_tuner_gain_mode
          hsdaoh_set_sample_rate
          hsdaoh_get_sample_rate
          hsdaoh_set_testmode
          hsdaoh_set_agc_mode
          hsdaoh_set_direct_sampling
          hsdaoh_get_direct_sampling
          hsdaoh_set_offset_tuning
          hsdaoh_get_offset_tuning
          hsdaoh_reset_buffer
          hsdaoh_read_sync
          hsdaoh_wait_async
          hsdaoh_read_async
          hsdaoh_cancel_async
          hsdaoh_set_bias_tee
          hsdaoh_set_bias_tee_gpio
          hsdaoh_ir_query
          hsdaoh_set_opt_string
          hsdaoh_start_stream
          hsdaoh_stop_stream
          EOF
          
          # Create import library using dlltool
          dlltool -d hsdaoh_deps/lib/hsdaoh.def -D libhsdaoh.dll -l hsdaoh_deps/lib/libhsdaoh.dll.a
          
          # Create a proper hsdaoh.h header
          cat > hsdaoh_deps/include/hsdaoh.h << 'EOF'
          #ifndef HSDAOH_H
          #define HSDAOH_H
          
          #include <stdint.h>
          #include <stddef.h>
          
          #ifdef __cplusplus
          extern "C" {
          #endif
          
          typedef struct hsdaoh_dev hsdaoh_dev_t;
          
          typedef void(*hsdaoh_read_async_cb_t)(unsigned char *buf, uint32_t len, uint8_t pack_state, void *ctx);
          
          // Function declarations
          uint32_t hsdaoh_get_device_count(void);
          const char* hsdaoh_get_device_name(uint32_t index);
          int hsdaoh_get_device_usb_strings(uint32_t index, char *manufact, char *product, char *serial);
          int hsdaoh_get_index_by_serial(const char *serial);
          int hsdaoh_open(hsdaoh_dev_t **dev, uint32_t index);
          int hsdaoh_close(hsdaoh_dev_t *dev);
          int hsdaoh_set_center_freq(hsdaoh_dev_t *dev, uint32_t freq);
          uint32_t hsdaoh_get_center_freq(hsdaoh_dev_t *dev);
          int hsdaoh_set_freq_correction(hsdaoh_dev_t *dev, int ppm);
          int hsdaoh_get_freq_correction(hsdaoh_dev_t *dev);
          int hsdaoh_get_tuner_type(hsdaoh_dev_t *dev);
          int hsdaoh_get_tuner_gains(hsdaoh_dev_t *dev, int *gains);
          int hsdaoh_set_tuner_gain(hsdaoh_dev_t *dev, int gain);
          int hsdaoh_get_tuner_gain(hsdaoh_dev_t *dev);
          int hsdaoh_set_tuner_gain_mode(hsdaoh_dev_t *dev, int manual);
          int hsdaoh_set_sample_rate(hsdaoh_dev_t *dev, uint32_t samp_rate);
          uint32_t hsdaoh_get_sample_rate(hsdaoh_dev_t *dev);
          int hsdaoh_set_testmode(hsdaoh_dev_t *dev, int on);
          int hsdaoh_set_agc_mode(hsdaoh_dev_t *dev, int on);
          int hsdaoh_set_direct_sampling(hsdaoh_dev_t *dev, int on);
          int hsdaoh_get_direct_sampling(hsdaoh_dev_t *dev);
          int hsdaoh_set_offset_tuning(hsdaoh_dev_t *dev, int on);
          int hsdaoh_get_offset_tuning(hsdaoh_dev_t *dev);
          int hsdaoh_reset_buffer(hsdaoh_dev_t *dev);
          int hsdaoh_read_sync(hsdaoh_dev_t *dev, void *buf, int len, int *n_read);
          int hsdaoh_wait_async(hsdaoh_dev_t *dev, hsdaoh_read_async_cb_t cb, void *ctx);
          int hsdaoh_read_async(hsdaoh_dev_t *dev, hsdaoh_read_async_cb_t cb, void *ctx, uint32_t buf_num, uint32_t buf_len);
          int hsdaoh_cancel_async(hsdaoh_dev_t *dev);
          int hsdaoh_set_bias_tee(hsdaoh_dev_t *dev, int on);
          int hsdaoh_set_bias_tee_gpio(hsdaoh_dev_t *dev, int gpio, int on);
          int hsdaoh_ir_query(hsdaoh_dev_t *dev, uint8_t *buf, size_t buf_len);
          int hsdaoh_set_opt_string(hsdaoh_dev_t *dev, const char *opts);
          int hsdaoh_start_stream(hsdaoh_dev_t *dev);
          int hsdaoh_stop_stream(hsdaoh_dev_t *dev);
          
          #ifdef __cplusplus
          }
          #endif
          
          #endif
          EOF
          
          # Set environment for CMake
          echo "HSDAOH_ROOT=$(pwd)/hsdaoh_deps" >> $GITHUB_ENV

      - name: Download pcm_extract v1.0.0
        shell: pwsh
        run: |
          Invoke-WebRequest "https://github.com/namazso/pcm_extract/releases/download/v1.0.0/pcm_extract.exe" -OutFile .\pcm_extract.exe

      - name: Build MISRC tools from source
        run: |
          cd misrc_tools
          mkdir build && cd build
          
          # Configure with hsdaoh library
          cmake .. -G "Ninja" \
            -DCMAKE_PREFIX_PATH="${HSDAOH_ROOT}" \
            -DLIBHSDAOH_LIBRARIES="${HSDAOH_ROOT}/lib/libhsdaoh.dll.a" \
            -DLIBHSDAOH_INCLUDE_DIRS="${HSDAOH_ROOT}/include"
          
          # Build the tools
          ninja misrc_capture misrc_extract
          
          # Verify build outputs
          ls -la misrc_capture.exe misrc_extract.exe

      - name: Create binary archive
        run: |
          # Create bundle directory 
          mkdir -p bundle
          
          # Copy freshly built MISRC tools
          cp misrc_tools/build/misrc_capture.exe bundle/
          cp misrc_tools/build/misrc_extract.exe bundle/
          
          # Copy pre-built dependency DLLs (not the old misrc_capture.exe)
          cp windows-binaries/libhsdaoh.dll bundle/
          cp windows-binaries/libuvc.dll bundle/
          cp windows-binaries/libusb-1.0.dll bundle/
          cp windows-binaries/libFLAC.dll bundle/
          cp windows-binaries/libogg-0.dll bundle/
          cp windows-binaries/libwinpthread-1.dll bundle/
          cp windows-binaries/zadig-2.9.exe bundle/
          
          # Copy pcm_extract.exe
          cp pcm_extract.exe bundle/ || true
          
          # List what we have
          ls -la bundle/
          
          # Create the archive 
          cd bundle
          zip -r ../${{ env.ARCHIVE_NAME_WINDOWS }} *
          cd ..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_capture-windows
          path: ${{ env.ARCHIVE_NAME_WINDOWS }}
          if-no-files-found: error
