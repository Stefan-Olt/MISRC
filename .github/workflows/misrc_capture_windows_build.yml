name: Build Windows Release

on:
  workflow_dispatch:
  push:
    tags:
      - "misrc_capture-*"

env:
  ARCHIVE_NAME_WINDOWS: ${{ github.ref_name }}-win-x86_64.zip

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install NASM
        env:
          WINDOWS_NASM_URL: https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip
          WINDOWS_NASM_DIR: nasm-2.16.01
        run: |
          Invoke-WebRequest ${{ env.WINDOWS_NASM_URL }} -OutFile .\nasm.zip
          Expand-Archive .\nasm.zip -DestinationPath .
          Write-Output .\${{ env.WINDOWS_NASM_DIR }} | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install FLAC v1.5.0
        env:
          FLAC_URL: https://github.com/xiph/flac/releases/download/1.5.0/flac-1.5.0-win.zip
          FLAC_DIR: flac-1.5.0-win
        run: |
          Invoke-WebRequest ${{ env.FLAC_URL }} -OutFile .\flac.zip
          Expand-Archive .\flac.zip -DestinationPath .
          # Set environment variables for CMake to find FLAC
          Write-Output "FLAC_ROOT=${{ github.workspace }}\${{ env.FLAC_DIR }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "${{ github.workspace }}\${{ env.FLAC_DIR }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install libusb and libuvc dependencies
        run: |
          # Download libusb for Windows
          Invoke-WebRequest "https://github.com/libusb/libusb/releases/download/v1.0.27/libusb-1.0.27.7z" -OutFile .\libusb.7z
          # Extract using 7z (available on Windows runners)
          7z x .\libusb.7z -o.\libusb
          
          # Debug: Show libusb directory structure
          Write-Host "libusb directory structure:"
          Get-ChildItem .\libusb -Recurse | Select-Object FullName | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          # Download pthread-win32 for Windows threading compatibility
          Invoke-WebRequest "https://sourceforge.net/projects/pthreads4w/files/pthreads4w-code-v3.0.0.zip/download" -OutFile .\pthreads.zip
          Expand-Archive .\pthreads.zip -DestinationPath .\pthreads
          
          # Debug: Show pthreads directory structure
          Write-Host "pthreads directory structure:"
          Get-ChildItem .\pthreads -Recurse | Select-Object FullName | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          # Download libuvc dependencies (we'll build this too)
          git clone https://github.com/libuvc/libuvc.git .\libuvc_src

      - name: Build libhsdaoh from source
        run: |
          # Clone libhsdaoh repository
          git clone https://github.com/Stefan-Olt/hsdaoh.git .\hsdaoh_src
          
          # Set up libusb paths - fix the extraction structure
          $libusbRoot = "${{ github.workspace }}\libusb\libusb-1.0.27"
          $libusbInclude = "$libusbRoot\include\libusb-1.0"
          $libusbLib = "$libusbRoot\MS64\dll"
          
          # Verify libusb paths exist and fix if needed
          Write-Host "Checking libusb paths:"
          Write-Host "  Root: $libusbRoot"
          Write-Host "  Include: $libusbInclude"
          Write-Host "  Lib: $libusbLib"
          
          # Check if the expected structure exists, if not, find the correct structure
          if (!(Test-Path $libusbInclude)) {
            Write-Host "  ✗ Include path missing, searching for correct structure..."
            $foundInclude = Get-ChildItem .\libusb -Recurse -Name "libusb.h" | Select-Object -First 1
            if ($foundInclude) {
              $libusbInclude = Split-Path (Join-Path .\libusb $foundInclude) -Parent
              Write-Host "  ✓ Found libusb.h at: $libusbInclude"
            } else {
              Write-Error "libusb.h not found in extracted archive"
              exit 1
            }
          } else {
            Write-Host "  ✓ Include path exists"
          }
          
          if (!(Test-Path $libusbLib)) {
            Write-Host "  ✗ Library path missing, searching for correct structure..."
            $foundLib = Get-ChildItem .\libusb -Recurse -Name "libusb-1.0.lib" | Select-Object -First 1
            if ($foundLib) {
              $libusbLib = Split-Path (Join-Path .\libusb $foundLib) -Parent
              Write-Host "  ✓ Found libusb-1.0.lib at: $libusbLib"
            } else {
              Write-Error "libusb-1.0.lib not found in extracted archive"
              exit 1
            }
          } else {
            Write-Host "  ✓ Library path exists"
          }
          
          # Final verification
          if (!(Test-Path "$libusbInclude\libusb.h")) {
            Write-Error "libusb.h not found at $libusbInclude\libusb.h"
            exit 1
          }
          if (!(Test-Path "$libusbLib\libusb-1.0.lib")) {
            Write-Error "libusb-1.0.lib not found at $libusbLib\libusb-1.0.lib"
            exit 1
          }
          
          Write-Host "✓ All libusb dependencies verified"
          Write-Host "  Final include path: $libusbInclude"
          Write-Host "  Final lib path: $libusbLib"
          
          # Set up pthread paths for Windows
          $pthreadsRoot = "${{ github.workspace }}\pthreads\pthreads4w-code-v3.0.0"
          $pthreadsInclude = "$pthreadsRoot"
          $pthreadsLib = "$pthreadsRoot\dll\x64"
          
          # Check for pthread files
          $foundPthreadH = Get-ChildItem .\pthreads -Recurse -Name "pthread.h" | Select-Object -First 1
          if ($foundPthreadH) {
            $pthreadsInclude = Split-Path (Join-Path .\pthreads $foundPthreadH) -Parent
            Write-Host "  ✓ Found pthread.h at: $pthreadsInclude"
          }
          
          $foundPthreadLib = Get-ChildItem .\pthreads -Recurse -Name "*pthread*.lib" | Select-Object -First 1
          if ($foundPthreadLib) {
            $pthreadsLib = Split-Path (Join-Path .\pthreads $foundPthreadLib) -Parent
            Write-Host "  ✓ Found pthread lib at: $pthreadsLib"
          }
          
          # Build libhsdaoh with proper libusb and pthread paths
          cmake -B .\hsdaoh_build -S .\hsdaoh_src `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DLIBUSB_ROOT="$libusbRoot" `
            -DLIBUSB_INCLUDE_DIRS="$libusbInclude" `
            -DLIBUSB_LIBRARIES="$libusbLib\libusb-1.0.lib" `
            -DCMAKE_PREFIX_PATH="$libusbRoot" `
            -DPTHREAD_INCLUDE_DIRS="$pthreadsInclude" `
            -DPTHREAD_LIBRARIES="$pthreadsLib\pthreadVC2.lib" `
            -DCMAKE_C_FLAGS="/I$pthreadsInclude" `
            -DCMAKE_CXX_FLAGS="/I$pthreadsInclude"
          
          # Check if we need to patch the CMakeLists.txt for better libusb support
          $cmakeListsPath = ".\hsdaoh_src\src\CMakeLists.txt"
          if (Test-Path $cmakeListsPath) {
            $cmakeContent = Get-Content $cmakeListsPath -Raw
            # Add include directories if not already present
            if ($cmakeContent -notmatch "include_directories.*LIBUSB_INCLUDE_DIRS") {
              $patchContent = @"
# Add libusb include directories
if(LIBUSB_INCLUDE_DIRS)
    include_directories(`${LIBUSB_INCLUDE_DIRS})
endif()

"@
              Add-Content -Path $cmakeListsPath -Value $patchContent
              Write-Host "  ✓ Patched CMakeLists.txt to include libusb directories"
            }
          }
          
          # Try building with standard configuration first
          Write-Host "Attempting to build libhsdaoh..."
          $buildSuccess = $false
          
          try {
            cmake --build .\hsdaoh_build --config Release 2>&1
            if ($LASTEXITCODE -eq 0) {
              $buildSuccess = $true
              Write-Host "  ✓ libhsdaoh build successful"
            }
          } catch {
            Write-Host "  ✗ Initial build failed: $($_.Exception.Message)"
          }
          
          # If the first build failed, try alternative approach
          if (-not $buildSuccess) {
            Write-Host "  ✗ libhsdaoh build failed, trying alternative approach..."
            
            # Try building with Windows threading instead of pthread
            cmake -B .\hsdaoh_build_alt -S .\hsdaoh_src `
              -G "Visual Studio 17 2022" `
              -A x64 `
              -DLIBUSB_ROOT="$libusbRoot" `
              -DLIBUSB_INCLUDE_DIRS="$libusbInclude" `
              -DLIBUSB_LIBRARIES="$libusbLib\libusb-1.0.lib" `
              -DCMAKE_PREFIX_PATH="$libusbRoot" `
              -DCMAKE_C_FLAGS="/DUSE_WINDOWS_THREADS /I`"$libusbInclude`"" `
              -DCMAKE_CXX_FLAGS="/DUSE_WINDOWS_THREADS /I`"$libusbInclude`""
            
            try {
              cmake --build .\hsdaoh_build_alt --config Release 2>&1
              if ($LASTEXITCODE -eq 0) {
                $buildSuccess = $true
                Write-Host "  ✓ Alternative build successful"
                # Copy from alternative build directory
                if (Test-Path ".\hsdaoh_build_alt\Release") {
                  New-Item -ItemType Directory -Path ".\hsdaoh_build\Release" -Force
                  Copy-Item .\hsdaoh_build_alt\Release\* .\hsdaoh_build\Release\ -Recurse -Force
                }
              }
            } catch {
              Write-Host "  ✗ Alternative build also failed: $($_.Exception.Message)"
            }
          }
          
          # If both builds failed, try a minimal approach
          if (-not $buildSuccess) {
            Write-Host "  ✗ All build attempts failed, trying minimal configuration..."
            
            # Create a minimal CMakeLists.txt for just building the library
            $minimalCMake = @"
cmake_minimum_required(VERSION 3.5)
project(hsdaoh)

# Find libusb
find_path(LIBUSB_INCLUDE_DIR libusb.h PATHS `"$libusbInclude`")
find_library(LIBUSB_LIBRARY libusb-1.0 PATHS `"$libusbLib`")

if(LIBUSB_INCLUDE_DIR AND LIBUSB_LIBRARY)
    include_directories(`${LIBUSB_INCLUDE_DIR})
    
    # Add source files
    file(GLOB SOURCES `"src/*.c`")
    
    # Create library
    add_library(hsdaoh SHARED `${SOURCES})
    target_link_libraries(hsdaoh `${LIBUSB_LIBRARY})
    
    # Set output directory
    set_target_properties(hsdaoh PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY_RELEASE `${CMAKE_BINARY_DIR}/Release
        LIBRARY_OUTPUT_DIRECTORY_RELEASE `${CMAKE_BINARY_DIR}/Release
    )
else()
    message(FATAL_ERROR `"libusb not found`")
endif()
"@
            
            Set-Content -Path ".\hsdaoh_src\CMakeLists_minimal.txt" -Value $minimalCMake
            
            try {
              cmake -B .\hsdaoh_build_minimal -S .\hsdaoh_src `
                -f .\hsdaoh_src\CMakeLists_minimal.txt `
                -G "Visual Studio 17 2022" `
                -A x64
              
              cmake --build .\hsdaoh_build_minimal --config Release 2>&1
              if ($LASTEXITCODE -eq 0) {
                $buildSuccess = $true
                Write-Host "  ✓ Minimal build successful"
                # Copy from minimal build directory
                if (Test-Path ".\hsdaoh_build_minimal\Release") {
                  New-Item -ItemType Directory -Path ".\hsdaoh_build\Release" -Force
                  Copy-Item .\hsdaoh_build_minimal\Release\* .\hsdaoh_build\Release\ -Recurse -Force
                }
              }
            } catch {
              Write-Host "  ✗ Minimal build also failed: $($_.Exception.Message)"
            }
          }
          
          if (-not $buildSuccess) {
            Write-Warning "All libhsdaoh build attempts failed. Continuing without hsdaoh library."
          }
          
          # Create dependencies directory and copy built files
          New-Item -ItemType Directory -Path .\hsdaoh_deps -Force
          
          # Copy built hsdaoh library
          if (Test-Path ".\hsdaoh_build\Release\hsdaoh.dll") {
            Copy-Item .\hsdaoh_build\Release\hsdaoh.dll .\hsdaoh_deps\libhsdaoh.dll
          }
          if (Test-Path ".\hsdaoh_build\Release\hsdaoh.lib") {
            Copy-Item .\hsdaoh_build\Release\hsdaoh.lib .\hsdaoh_deps\
          }
          
          # Copy libusb DLLs
          $libusbDll = "$libusbLib\libusb-1.0.dll"
          if (Test-Path $libusbDll) {
            Copy-Item $libusbDll .\hsdaoh_deps\
          }
          
          # Copy pthread DLLs if they exist
          $pthreadDll = Get-ChildItem .\pthreads -Recurse -Name "*pthread*.dll" | Select-Object -First 1
          if ($pthreadDll) {
            $pthreadDllPath = Join-Path .\pthreads $pthreadDll
            Copy-Item $pthreadDllPath .\hsdaoh_deps\
            Write-Host "  ✓ Copied pthread DLL: $pthreadDll"
          }
          
          # Set environment for main build to find hsdaoh
          Write-Output "HSDAOH_ROOT=${{ github.workspace }}\hsdaoh_deps" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "${{ github.workspace }}\hsdaoh_deps" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download pcm_extract v1.0.0
        run: |
          Invoke-WebRequest "https://github.com/namazso/pcm_extract/releases/download/v1.0.0/pcm_extract.exe" -OutFile .\pcm_extract.exe

      - name: Build
        run: |
          cmake -B ${{ github.workspace }}\misrc_tools/build `
            ${{ github.workspace }}\misrc_tools `
            -G "Visual Studio 17 2022" `
            -A x64
          # Build both misrc_capture and misrc_extract
          cmake --build ${{ github.workspace }}\misrc_tools/build --target misrc_capture --config Release
          cmake --build ${{ github.workspace }}\misrc_tools/build --target misrc_extract --config Release

      - name: Create binary archive
        run: |
          # Create a temporary directory for bundling
          New-Item -ItemType Directory -Path .\bundle -Force
          
          # Copy main executables
          Copy-Item ${{ github.workspace }}\misrc_tools\build\Release\misrc_capture.exe .\bundle\
          Copy-Item ${{ github.workspace }}\misrc_tools\build\Release\misrc_extract.exe .\bundle\
          
          # Copy pcm_extract.exe
          if (Test-Path ".\pcm_extract.exe") {
            Copy-Item .\pcm_extract.exe .\bundle\
          }
          
          # Copy FLAC executables and DLLs
          if (Test-Path "${{ github.workspace }}\flac-1.5.0-win\bin") {
            $flacBin = "${{ github.workspace }}\flac-1.5.0-win\bin"
            # FLAC executables
            if (Test-Path "$flacBin\flac.exe") { Copy-Item "$flacBin\flac.exe" .\bundle\ }
            if (Test-Path "$flacBin\metaflac.exe") { Copy-Item "$flacBin\metaflac.exe" .\bundle\ }
            # FLAC DLLs
            if (Test-Path "$flacBin\libFLAC.dll") { Copy-Item "$flacBin\libFLAC.dll" .\bundle\ }
            if (Test-Path "$flacBin\libFLAC++.dll") { Copy-Item "$flacBin\libFLAC++.dll" .\bundle\ }
            if (Test-Path "$flacBin\libogg-0.dll") { Copy-Item "$flacBin\libogg-0.dll" .\bundle\ }
          }
          
          # Copy hsdaoh dependencies
          if (Test-Path ".\hsdaoh_deps") {
            Get-ChildItem .\hsdaoh_deps -Filter "*.dll" | ForEach-Object {
              Copy-Item $_.FullName .\bundle\
            }
            Get-ChildItem .\hsdaoh_deps -Filter "*.exe" | ForEach-Object {
              Copy-Item $_.FullName .\bundle\
            }
          }
          
          # List all files being bundled for verification
          Write-Host "Files being bundled:"
          Get-ChildItem .\bundle | ForEach-Object { Write-Host "  $_" }
          
          # Create the archive with all files
          Compress-Archive -Path .\bundle\* -DestinationPath ${{ env.ARCHIVE_NAME_WINDOWS }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_capture-windows
          path: ${{ env.ARCHIVE_NAME_WINDOWS }}
          if-no-files-found: error

