name: "Build and release binary"

on:
  workflow_dispatch:
  push:
    tags:
      - "misrc_tools-*"

env:
  ARCHIVE_NAME_LINUX: ${{ github.ref_name }}-linux-x86_64.tar.gz
  ARCHIVE_NAME_LINUX_ARM: ${{ github.ref_name }}-linux-arm64.tar.gz
  ARCHIVE_NAME_WINDOWS: ${{ github.ref_name }}-win-x86_64.zip
  ARCHIVE_NAME_WINDOWS_ARM: ${{ github.ref_name }}-win-arm64.zip
  ARCHIVE_NAME_MACOS_INTEL: ${{ github.ref_name }}-macos-intel-x86_64.tar.gz
  ARCHIVE_NAME_MACOS_ARM: ${{ github.ref_name }}-macos-apple-silicon-arm64.tar.gz
  ARCHIVE_NAME_SRC: ${{ github.ref_name }}-src.tar.gz

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cmake nasm build-essential libusb-1.0-0-dev curl meson ninja-build
          version: 1.0

      - name: Build
        run: |
          cd ${{ github.workspace }}/build
          ./build-static.sh

      - name: Create binary archive
        run: |
          tar -cvzf ~/${{ env.ARCHIVE_NAME_LINUX }} \
          --owner=root --group=root \
          -C ${{ github.workspace }}/build/workspace/bin \
          misrc_capture misrc_extract

      - name: Create source archive
        run: |
          tar -cvzf ~/${{ env.ARCHIVE_NAME_SRC }} \
          --owner=root --group=root \
          --exclude=build \
          misrc_tools

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-linux
          path: ~/${{ env.ARCHIVE_NAME_LINUX }}
          if-no-files-found: error

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-src
          path: ~/${{ env.ARCHIVE_NAME_SRC }}
          if-no-files-found: error

  build-linux-arm:
    name: Build Linux ARM
    runs-on: ubuntu-22.04-arm

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cmake nasm build-essential libusb-1.0-0-dev curl meson ninja-build
          version: 1.0

      - name: Build
        run: |
          cd ${{ github.workspace }}/build
          ./build-static.sh

      - name: Create binary archive
        run: |
          cd
          tar -cvzf ~/${{ env.ARCHIVE_NAME_LINUX_ARM }} \
          --owner=root --group=root \
          -C ${{ github.workspace }}/build/workspace/bin \
          misrc_capture misrc_extract

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-linux-arm
          path: ~/${{ env.ARCHIVE_NAME_LINUX_ARM }}
          if-no-files-found: error

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            base-devel
            zip
            git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-nasm

      - name: Build
        run: |
          cd '${{ github.workspace }}/build'
          ./build-static.sh

      - name: Create binary archive
        run: >-
          zip -9 -j ${{ env.ARCHIVE_NAME_WINDOWS }}
          '${{ github.workspace | regex_replace("\\", "/") }}/build/workspace/bin/misrc_capture.exe'
          '${{ github.workspace | regex_replace("\\", "/") }}/build/workspace/bin/misrc_extract.exe'

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-windows
          path: ${{ env.ARCHIVE_NAME_WINDOWS }}
          if-no-files-found: error

  build-windows-arm:
    name: Build Windows (ARM)
    runs-on: windows-11-arm
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANGARM64
          update: true
          install: >-
            base-devel
            zip
            git
            mingw-w64-clang-aarch64-clang
            mingw-w64-clang-aarch64-pkgconf
            mingw-w64-clang-aarch64-meson
            mingw-w64-clang-aarch64-ninja
            mingw-w64-clang-aarch64-cmake

      - name: Build
        run: |
          cd '${{ github.workspace }}/build'
          ./build-static.sh

      - name: Create binary archive
        run: >-
          zip -9 -j ${{ env.ARCHIVE_NAME_WINDOWS_ARM }}
          '${{ github.workspace | regex_replace("\\", "/") }}/build/workspace/bin/misrc_capture.exe'
          '${{ github.workspace | regex_replace("\\", "/") }}/build/workspace/bin/misrc_extract.exe'

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-windows-arm
          path: ${{ env.ARCHIVE_NAME_WINDOWS_ARM }}
          if-no-files-found: error

  build-macos-intel:
    name: Build macOS (Intel)
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install
        run: |
          brew install cmake nasm meson ninja

      - name: Build
        run: |
          cd ${{ github.workspace }}/build
          ./build-static.sh

      - name: Create binary archive
        run: >-
          tar -cvzf ${{ env.ARCHIVE_NAME_MACOS_INTEL }}
          --uid 0 --gid 0 --no-acls
          -C ${{ github.workspace }}/build/workspace/bin
          misrc_capture misrc_extract

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-macos-intel
          path: ${{ env.ARCHIVE_NAME_MACOS_INTEL }}
          if-no-files-found: error

  build-macos-arm:
    name: Build macOS (Apple Silicon)
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install
        run: |
          brew install cmake meson ninja

      - name: Build
        run: |
          cd ${{ github.workspace }}/build
          ./build-static.sh

      - name: Create binary archive
        run: >-
          tar -cvzf ${{ env.ARCHIVE_NAME_MACOS_ARM }}
          --uid 0 --gid 0 --no-acls
          -C ${{ github.workspace }}/build/workspace/bin
          misrc_capture misrc_extract

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: misrc_tools-macos-arm
          path: ${{ env.ARCHIVE_NAME_MACOS_ARM }}
          if-no-files-found: error

  github-release:
    if: ${{ ! startsWith(github.ref, 'refs/tags/misrc_tools') }}
    name: Create GitHub release
    runs-on: ubuntu-22.04

    needs:
      - build-linux
      - build-linux-arm
      - build-windows
      - build-windows-arm
      - build-macos-intel
      - build-macos-arm

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --title '${{ github.ref_name }}'
          --notes ""

      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}

        run: |
          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-linux/${{ env.ARCHIVE_NAME_LINUX }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-linux-arm/${{ env.ARCHIVE_NAME_LINUX_ARM }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-windows/${{ env.ARCHIVE_NAME_WINDOWS }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-windows-arm/${{ env.ARCHIVE_NAME_WINDOWS_ARM }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-macos-intel/${{ env.ARCHIVE_NAME_MACOS_INTEL }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-macos-arm/${{ env.ARCHIVE_NAME_MACOS_ARM }}' \
          --repo '${{ github.repository }}'

          gh release upload \
          '${{ github.ref_name }}' \
          'misrc_tools-src/${{ env.ARCHIVE_NAME_SRC }}' \
          --repo '${{ github.repository }}'
